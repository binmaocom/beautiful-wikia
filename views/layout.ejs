<!DOCTYPE html>
<html xmlns:ng="http://angularjs.org">
  <head>
    <title><%- title %></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `link` tags, or asynchronously
        on the client using a solution like AMD (RequireJS).  Or, if you like, you can
        take advantage of Sails' boilerplate asset management.

        By default, stylesheets from your `assets/linker/styles` folder are included
        here automatically.  Both CSS (.css) and LESS (.less) are supported.
        In production, your styles will be minified and concatenated into a single file.

        To customize any part of the built-in behavior, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/linker/styles/app.css">
    <!--STYLES END-->
    <script type="text/javascript">
      // Export variables from server here
      window.wikia = {};
      wikia.env = <%- JSON.stringify( env ) %>;
    </script>

  </head>

  <body ng-controller="BodyCtrl" ng-keyup="handleKeyup( $event )">
    <nav class="top-bar z-max">
      <ul class="title-area">
        <li class="name">
          <h1><a href="#"><img class="logo" src="images/logo-wikia.png" alt=""></a></h1>
        </li>
      </ul>
      <!-- <section class="top&#45;bar&#45;section"> -->
      <!--   <!&#45;&#45; Left Nav Section &#45;&#45;> -->
      <!--   <ul class="left"> -->
      <!--     <li><a href="#">Search</a></li> -->
      <!--   </ul> -->
      <!--   <!&#45;&#45; Right Nav Section &#45;&#45;> -->
      <!--   <ul class="right"> -->
      <!--     <li class="active"><a href="#">Right Nav Button Active</a></li> -->
      <!--     <li class="has&#45;dropdown"> -->
      <!--       <a href="#">Right Button with Dropdown</a> -->
      <!--       <ul class="dropdown"> -->
      <!--         <li><a href="#">First link in dropdown</a></li> -->
      <!--       </ul> -->
      <!--     </li> -->
      <!--   </ul> -->
      <!-- </section> -->
    </nav>
    <div class="row content-wrapper">
      <header class="row">
        <h1 id="wk-article-title" class="hero-title" ng-class="{ invisible: !!changing }" ng-bind="pageHeader"></h1>
      </header>
      <div class="content row">
        <%- body %>
      </div>
    </div>
    <%- partial('partials/footer') %>
    <div class="hero">
      <wk-hero-image></wk-hero-image>
    </div>
    <wk-modal show-when="modals.articleInput">
      <wk-article-input />
    </wk-modal>
    <wk-back-to-top ng-class="{ opaque: hasScrollHeight }"><i class="fa fa-arrow-circle-up"></i></wk-back-to-top>

    <!--
        Client-side Templates
        ========================

    		HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/linker/templates` folder, then
        include them here automatically.

        To customize this behavior to fit your needs, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your templates using a server-side stringfile
              before they're served.
    -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/jst.js"></script>
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' boilerplate asset management.

      By default, filesin your `assets/linker/js` folder are included here
      automatically.  Both JavaScript (.js) and CoffeeScript (.coffee) are supported.
      In production, your scripts will be minified and concatenated into a single file.

      To customize any part of the built-in behavior, just edit your Gruntfile.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/linker/js/socket.io.js"></script>
    <script src="/linker/js/sails.io.js"></script>
    <script src="/linker/js/app.js"></script>
    <!--SCRIPTS END-->
    <script data-main="/scripts/main.js" src="/components/requirejs/require.js"></script>
  </body>
</html>
